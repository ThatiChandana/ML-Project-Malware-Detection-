import numpy as np #mathematical calc
import pandas as pd #data manipulation
import seaborn as sns #graphical representation
import matplotlib.pyplot as plt #visualization
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, ExtraTreesClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import LogisticRegression

#loading the dataset
data = pd.read_csv('/content/uci_malware_detection (1) (1).csv')
data.head()

from sklearn.preprocessing import StandardScaler  # to standardize the features

# DataFrame is used for cleaning and transforming data
df = pd.DataFrame(data)
data = df
data.head()

# Data Splitting
X = data.drop(["Label"],axis=1) #independent variables
y = data['Label'].values #target
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=42)

# Reducing the columns with PCA

from sklearn.decomposition import PCA # importing the PCA

# apply PCA on independent variables
pca = PCA(n_components=6)
X_pca = pca.fit_transform(X) # used for consistency
# calc mean and std deviation and then apply standardization

df = pd.DataFrame(data=X_pca, columns=['F1', 'F2', 'F3', 'F4', 'F5', 'F6'])
# concatenate PCA transformed data with target variable
df['Label'] = y

# print first 5 rows of the new dataset
print(df.head())

data = df
data
X = data.drop(["Label"],axis=1)
y = data['Label'].values
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=42)

# Data Processing
data.isnull().sum()
sns.countplot(x='Label', data=data);

#Training the data and finding accuracy using classifiers
# 1. Logistic Regression
lr_model =  LogisticRegression(max_iter=500 ,random_state=42)

# 2. Decision Tree
dt_model =  DecisionTreeClassifier()

# 3. Naive Bayes
nb_model = GaussianNB()

# 4. Random Forest
rf_model = RandomForestClassifier( n_jobs=-1)

# 5. KNN
knn_model = KNeighborsClassifier(n_jobs=-1)

# 6. AdaBoost
ada_boost_model = AdaBoostClassifier()

# 7. ExtraTrees
extra_trees_model = ExtraTreesClassifier()


######################### LIST OF ALL MODELS #############################3
ensemble_clf=[lr_model, dt_model, nb_model, rf_model, knn_model, ada_boost_model, extra_trees_model]

#print(ensemble_clf)
print(len(ensemble_clf))








